package epam.company.hometask7;

import java.util.Arrays;
import java.util.Comparator;

/**
 * Created by Polina_Voronova on 11/8/2019.
 */
public class Books {
    private int length;
    Book[] array;

    public Books(int length, String[] authors, int[] years, double[] prices) {
        this.length = length;
        this.array = new Book[length];

        for (int i=0;i < array.length; i++) {
            array[i] = new Book(authors[i], years[i], prices[i]);
        }
    }
    public Books(int length) {
        this.length = length;
        this.array = new Book[length];
    }
    // Special Constructor for addBooks
    public Books (int length,Book[] bookForConstructor){
        this.length = length;
        this.array = bookForConstructor;
    }

    public int getLength() {
        return length;
    }

    public Book[] getArray() {
        return array;
    }

    public Books addBook (Books lib, Book b) {

        int newLength = lib.length + 1;
        Book[] newArray = new Book[newLength];
        for (int i=0; i < lib.length; i++){

            newArray[i]  = lib.array[i];
        }
        newArray[newLength - 1] = b;
        return new Books(newLength, newArray);
    }

    public Books searchByYear(int yearForSearch){
        int counter = 0;
        Book[] newArrayInternal = new Book[this.length];
        for (int i=0, j = 0; i < this.length; i++){

            if (this.array[i].getPublicatedYear() > yearForSearch){

                newArrayInternal[j] = this.array[i];
                counter++;
                j++;
            }
        }
        if (counter == 0) {
            System.out.println("No books after " + yearForSearch + " year were found. You have obtained NULL");
            return new Books(0);
        } else {
            System.out.println("We have found " + counter + " books after " + yearForSearch + " year");
            return new Books(counter, Arrays.copyOf(newArrayInternal, counter));
        }
    }


    public Books searchByAuthor(String authorForSearch){
        int counter = 0;
        Book[] newArrayInternal = new Book[this.length];
        for (int i=0, j = 0; i < this.length; i++){

            if (this.array[i].getAuthor().equalsIgnoreCase(authorForSearch)){

                newArrayInternal[j] = this.array[i];
                counter++;
                j++;
            }
        }
        if (counter == 0) {
            System.out.println("No books by " + authorForSearch + " were found. You have obtained NULL");
            return new Books(0);
        } else {
            System.out.println("We have found " + counter + " books by " + authorForSearch);
            return new Books(counter, Arrays.copyOf(newArrayInternal, counter));
        }
    }

    public void changePrice (int percent){
        for (int i=0; i < this.length; i++){

            double newPrice = this.array[i].getPrice() * (1 + (double)percent / 100) ;
            this.array[i].setPrice(newPrice);
        }
    }

    public void printBooks () {

        if (this.array.length == 0) {
            System.out.println("No books");
        } else {
            for (int b = 0; b < this.length; b++) {
                System.out.println(array[b]);
                //array[b].viewBook();
                System.out.println("******************************"); //just for visual effect
            }
        }
    }
    public void sortByAuthor() {
        Book[] sortedBook = Arrays.copyOf(array, length);
        Arrays.sort(sortedBook, new Comparator<Book>() {
            @Override
            public int compare(Book book1, Book book2) {
                return book1.getAuthor().compareTo(book2.getAuthor());
            }
        });
        System.arraycopy(sortedBook, 0, array, 0, length);
    }

    public void sortByPublisher(){
        Book[] sortedBook = Arrays.copyOf(array, length);
        Arrays.sort(sortedBook, new Comparator<Book>() {
            @Override
            public int compare(Book book1, Book book2) {
                return book1.getPublisher().compareTo(book2.getPublisher());
            }
        });
        System.arraycopy(sortedBook, 0, array, 0, length);
    }

    public void sortByPrice(){
        Book[] sortedBook = Arrays.copyOf(array, length);
        Arrays.sort(sortedBook, new Comparator<Book>() {
            @Override
            public int compare(Book book1, Book book2) {
                return Double.compare(book1.getPrice(), book2.getPrice());
            }
        });
        System.arraycopy(sortedBook, 0, array, 0, length);
    }
}



